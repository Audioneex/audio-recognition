# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _audioneex
else:
    import _audioneex

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _audioneex.delete_SwigPyIterator

    def value(self):
        return _audioneex.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _audioneex.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _audioneex.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _audioneex.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _audioneex.SwigPyIterator_equal(self, x)

    def copy(self):
        return _audioneex.SwigPyIterator_copy(self)

    def next(self):
        return _audioneex.SwigPyIterator_next(self)

    def __next__(self):
        return _audioneex.SwigPyIterator___next__(self)

    def previous(self):
        return _audioneex.SwigPyIterator_previous(self)

    def advance(self, n):
        return _audioneex.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _audioneex.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _audioneex.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _audioneex.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _audioneex.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _audioneex.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _audioneex.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _audioneex:
_audioneex.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _audioneex.SHARED_PTR_DISOWN
K_MSCALE_MATCH = _audioneex.K_MSCALE_MATCH
K_XSCALE_MATCH = _audioneex.K_XSCALE_MATCH
K_FUZZY_IDENTIFICATION = _audioneex.K_FUZZY_IDENTIFICATION
K_BINARY_IDENTIFICATION = _audioneex.K_BINARY_IDENTIFICATION
K_STRICT_IDENTIFICATION = _audioneex.K_STRICT_IDENTIFICATION
K_EASY_IDENTIFICATION = _audioneex.K_EASY_IDENTIFICATION
K_UNIDENTIFIED = _audioneex.K_UNIDENTIFIED
K_SOUNDS_LIKE = _audioneex.K_SOUNDS_LIKE
K_IDENTIFIED = _audioneex.K_IDENTIFIED
class IdMatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FID = property(_audioneex.IdMatch_FID_get, _audioneex.IdMatch_FID_set)
    confidence = property(_audioneex.IdMatch_confidence_get, _audioneex.IdMatch_confidence_set)
    score = property(_audioneex.IdMatch_score_get, _audioneex.IdMatch_score_set)
    id_class = property(_audioneex.IdMatch_id_class_get, _audioneex.IdMatch_id_class_set)
    cue_point = property(_audioneex.IdMatch_cue_point_get, _audioneex.IdMatch_cue_point_set)

    def __init__(self):
        _audioneex.IdMatch_swiginit(self, _audioneex.new_IdMatch())
    __swig_destroy__ = _audioneex.delete_IdMatch

# Register IdMatch in _audioneex:
_audioneex.IdMatch_swigregister(IdMatch)

class Database(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FETCH = _audioneex.Database_FETCH
    BUILD = _audioneex.Database_BUILD

    def __init__(self, *args):
        _audioneex.Database_swiginit(self, _audioneex.new_Database(*args))
    __swig_destroy__ = _audioneex.delete_Database

    def open(self, op):
        return _audioneex.Database_open(self, op)

    def close(self):
        return _audioneex.Database_close(self)

    def is_empty(self):
        return _audioneex.Database_is_empty(self)

    def clear(self):
        return _audioneex.Database_clear(self)

    def is_open(self):
        return _audioneex.Database_is_open(self)

    def get_fp_count(self):
        return _audioneex.Database_get_fp_count(self)

    def put_metadata(self, FID, meta):
        return _audioneex.Database_put_metadata(self, FID, meta)

    def get_metadata(self, FID):
        return _audioneex.Database_get_metadata(self, FID)

    def put_info(self, info):
        return _audioneex.Database_put_info(self, info)

    def get_info(self):
        return _audioneex.Database_get_info(self)

    def get_op_mode(self):
        return _audioneex.Database_get_op_mode(self)

    def set_op_mode(self, mode):
        return _audioneex.Database_set_op_mode(self, mode)

    def set_url(self, url):
        return _audioneex.Database_set_url(self, url)

    def get_url(self):
        return _audioneex.Database_get_url(self)

    def set_name(self, name):
        return _audioneex.Database_set_name(self, name)

    def get_name(self):
        return _audioneex.Database_get_name(self)

# Register Database in _audioneex:
_audioneex.Database_swigregister(Database)

class Callbacks(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Callbacks:
            _self = None
        else:
            _self = self
        _audioneex.Callbacks_swiginit(self, _audioneex.new_Callbacks(_self, ))
    __swig_destroy__ = _audioneex.delete_Callbacks

    def on_audio_request(self, FID, nsamples):
        return _audioneex.Callbacks_on_audio_request(self, FID, nsamples)
    def __disown__(self):
        self.this.disown()
        _audioneex.disown_Callbacks(self)
        return weakref.proxy(self)

# Register Callbacks in _audioneex:
_audioneex.Callbacks_swigregister(Callbacks)

class Indexer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _audioneex.Indexer_swiginit(self, _audioneex.new_Indexer(*args))

        if(len(args) == 2):
            self._aprovider = args[1]



    __swig_destroy__ = _audioneex.delete_Indexer

    def start(self):
        return _audioneex.Indexer_start(self)

    def index(self, FID):
        return _audioneex.Indexer_index(self, FID)

    def end(self, flush=True):
        return _audioneex.Indexer_end(self, flush)

    def set_match_type(self, type):
        return _audioneex.Indexer_set_match_type(self, type)

    def get_match_type(self):
        return _audioneex.Indexer_get_match_type(self)

    def set_cache_limit(self, limit):
        return _audioneex.Indexer_set_cache_limit(self, limit)

    def get_cache_limit(self):
        return _audioneex.Indexer_get_cache_limit(self)

    def get_cache_used(self):
        return _audioneex.Indexer_get_cache_used(self)

    def set_datastore(self, dstore):
        return _audioneex.Indexer_set_datastore(self, dstore)

    def get_datastore(self):
        return _audioneex.Indexer_get_datastore(self)

    def set_audio_provider(self, aprovider):
        val = _audioneex.Indexer_set_audio_provider(self, aprovider)

        self._aprovider = aprovider


        return val


    def get_audio_provider(self):
        return _audioneex.Indexer_get_audio_provider(self)

# Register Indexer in _audioneex:
_audioneex.Indexer_swigregister(Indexer)

class AudioBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _audioneex.AudioBuffer_swiginit(self, _audioneex.new_AudioBuffer(*args))
    __swig_destroy__ = _audioneex.delete_AudioBuffer

    def __getitem__(self, i):
        return _audioneex.AudioBuffer___getitem__(self, i)

    def __setitem__(self, i, val):
        return _audioneex.AudioBuffer___setitem__(self, i, val)

    def capacity(self):
        return _audioneex.AudioBuffer_capacity(self)

    def size(self):
        return _audioneex.AudioBuffer_size(self)

    def set_size(self, nsamples):
        return _audioneex.AudioBuffer_set_size(self, nsamples)

    def sample_rate(self):
        return _audioneex.AudioBuffer_sample_rate(self)

    def channels(self):
        return _audioneex.AudioBuffer_channels(self)

    def bits_per_sample(self):
        return _audioneex.AudioBuffer_bits_per_sample(self)

    def duration(self):
        return _audioneex.AudioBuffer_duration(self)

    def copy_to(self, buffer):
        return _audioneex.AudioBuffer_copy_to(self, buffer)

    def __len__(self):
        return _audioneex.AudioBuffer___len__(self)

    def __iter__(self):
        val = _audioneex.AudioBuffer___iter__(self)

        val.set(self)


        return val


# Register AudioBuffer in _audioneex:
_audioneex.AudioBuffer_swigregister(AudioBuffer)

class AudioSourceFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _audioneex.AudioSourceFile_swiginit(self, _audioneex.new_AudioSourceFile(*args))
    __swig_destroy__ = _audioneex.delete_AudioSourceFile

    def open(self, fileURL):
        return _audioneex.AudioSourceFile_open(self, fileURL)

    def close(self):
        return _audioneex.AudioSourceFile_close(self)

    def is_open(self):
        return _audioneex.AudioSourceFile_is_open(self)

    def read(self, nsamples=-1):
        return _audioneex.AudioSourceFile_read(self, nsamples)

    def readin(self, buffer):
        return _audioneex.AudioSourceFile_readin(self, buffer)

    def filename(self):
        return _audioneex.AudioSourceFile_filename(self)

    def set_position(self, time):
        return _audioneex.AudioSourceFile_set_position(self, time)

    def get_position(self):
        return _audioneex.AudioSourceFile_get_position(self)

    def buffer(self):
        return _audioneex.AudioSourceFile_buffer(self)

# Register AudioSourceFile in _audioneex:
_audioneex.AudioSourceFile_swigregister(AudioSourceFile)

class IdResults(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _audioneex.IdResults_swiginit(self, _audioneex.new_IdResults())
    __swig_destroy__ = _audioneex.delete_IdResults

    def __getitem__(self, i):
        return _audioneex.IdResults___getitem__(self, i)

    def __setitem__(self, i, val):
        return _audioneex.IdResults___setitem__(self, i, val)

    def __len__(self):
        return _audioneex.IdResults___len__(self)

    def __iter__(self):
        val = _audioneex.IdResults___iter__(self)

        val.set(self)


        return val


# Register IdResults in _audioneex:
_audioneex.IdResults_swigregister(IdResults)

class Recognizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _audioneex.Recognizer_swiginit(self, _audioneex.new_Recognizer(*args))
    __swig_destroy__ = _audioneex.delete_Recognizer

    def set_match_type(self, type):
        return _audioneex.Recognizer_set_match_type(self, type)

    def set_mms(self, value):
        return _audioneex.Recognizer_set_mms(self, value)

    def set_identification_type(self, type):
        return _audioneex.Recognizer_set_identification_type(self, type)

    def set_identification_mode(self, mode):
        return _audioneex.Recognizer_set_identification_mode(self, mode)

    def set_binary_id_threshold(self, value):
        return _audioneex.Recognizer_set_binary_id_threshold(self, value)

    def set_binary_id_min_time(self, value):
        return _audioneex.Recognizer_set_binary_id_min_time(self, value)

    def set_max_recording_duration(self, duration):
        return _audioneex.Recognizer_set_max_recording_duration(self, duration)

    def get_match_type(self):
        return _audioneex.Recognizer_get_match_type(self)

    def get_mms(self):
        return _audioneex.Recognizer_get_mms(self)

    def get_identification_type(self):
        return _audioneex.Recognizer_get_identification_type(self)

    def get_identification_mode(self):
        return _audioneex.Recognizer_get_identification_mode(self)

    def get_binary_id_threshold(self):
        return _audioneex.Recognizer_get_binary_id_threshold(self)

    def get_binary_id_min_time(self):
        return _audioneex.Recognizer_get_binary_id_min_time(self)

    def identify(self, audio):
        return _audioneex.Recognizer_identify(self, audio)

    def get_results(self):
        return _audioneex.Recognizer_get_results(self)

    def get_identification_time(self):
        return _audioneex.Recognizer_get_identification_time(self)

    def flush(self):
        return _audioneex.Recognizer_flush(self)

    def set_datastore(self, dstore):
        return _audioneex.Recognizer_set_datastore(self, dstore)

    def get_datastore(self):
        return _audioneex.Recognizer_get_datastore(self)

# Register Recognizer in _audioneex:
_audioneex.Recognizer_swigregister(Recognizer)

class _IdResultsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set(self, it):
        return _audioneex._IdResultsIterator_set(self, it)

    def __next__(self):
        try:
            return _audioneex._IdResultsIterator___next__(self)
        except Exception as e:
            if str(e) == "__AX_ITERATOR_END__":
                raise StopIteration
            else:
                raise RuntimeError(e)



    def __init__(self):
        _audioneex._IdResultsIterator_swiginit(self, _audioneex.new__IdResultsIterator())
    __swig_destroy__ = _audioneex.delete__IdResultsIterator

# Register _IdResultsIterator in _audioneex:
_audioneex._IdResultsIterator_swigregister(_IdResultsIterator)

class _AudioBufferIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set(self, it):
        return _audioneex._AudioBufferIterator_set(self, it)

    def __next__(self):
        try:
            return _audioneex._AudioBufferIterator___next__(self)
        except Exception as e:
            if str(e) == "__AX_ITERATOR_END__":
                raise StopIteration
            else:
                raise RuntimeError(e)



    def __init__(self):
        _audioneex._AudioBufferIterator_swiginit(self, _audioneex.new__AudioBufferIterator())
    __swig_destroy__ = _audioneex.delete__AudioBufferIterator

# Register _AudioBufferIterator in _audioneex:
_audioneex._AudioBufferIterator_swigregister(_AudioBufferIterator)



