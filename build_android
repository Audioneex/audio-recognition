#!/bin/bash
#
# This script uses the Android NDK build system (ndk-build et al.) "in-place" 
# to build the library without the need for exporting individual toolchains
# for each architecture. Execute it from the root directory as specified below
#
# Usage: build_android [<arch> <api> <bmode> <btype>] 
#
# where:
#       arch  - Target architecure (armeabi-v7a, arm64-v8a,"
#               x86, x86_64)"
#       api   - Target Android API (version number from 21 onward)"
#       bmode - Build mode (debug, release)"
#       btype - Build binary type (dynamic, static)"
#
# The paramaters are optional and if not specified they default to armeabi-v7a, 
# 21, release and dynamic respectively. If used, all of them must be given in 
# that exact order.
#
#
# Author  : Alberto Gramaglia
# Date    : 19-09-2019
# Version : 1.3.0
#

set -e

function error()
{
  echo ""
  echo "ERROR: [build_android] ${AX_ERROR}"
  echo ""
  echo "Usage: build_android [<arch> <api> <bmode> <btype>]"
  echo ""
  echo "       arch  - Target architecure (armeabi-v7a, arm64-v8a,"
  echo "               x86, x86_64)"
  echo "       api   - Target Android API (version number from 21 onward)"
  echo "       bmode - Build mode (debug, release)"
  echo "       btype - Build binary type (dynamic, static)"
  echo ""
  exit 1
}

declare -A SUPPORTED_ARCH=(
   ["x86"]=1 
   ["x86_64"]=1 
   ["arm64-v8a"]=1 
   ["armeabi-v7a"]=1
)
declare -A SUPPORTED_BMODE=(
   ["debug"]=1 
   ["release"]=1
)
declare -A SUPPORTED_BTYPE=(
   ["static"]=1 
   ["dynamic"]=1
)

AX_ROOT_DIR=$(cd $(dirname "$0") && pwd)

if [[ ! $# =~ 0|4 ]]; then AX_ERROR="Invalid command"; error; fi

BUILD_ARCH="armeabi-v7a"
BUILD_COMP="clang"
BUILD_API="21"
BUILD_MODE="release"
BUILD_BTYPE="dynamic"

if [ -n "$1" ]; then BUILD_ARCH=$1; fi
if [ -n "$2" ]; then BUILD_API=$2; fi
if [ -n "$3" ]; then BUILD_MODE=$3; fi
if [ -n "$4" ]; then BUILD_BTYPE=$4; fi

# Parameters check
if [[ ! ${SUPPORTED_ARCH["$BUILD_ARCH"]} ]] ; then
   AX_ERROR="Invalid architecture '$BUILD_ARCH'"
   error
fi

if [[ ! $BUILD_API =~ ^[2-9][0-9]$ ]]; then
   AX_ERROR="Invalid API version '$BUILD_API'"
   error
fi

if [[ ! ${SUPPORTED_BMODE["$BUILD_MODE"]} ]] ; then
   AX_ERROR="Invalid build mode '$BUILD_MODE'"
   error
fi

if [[ ! ${SUPPORTED_BTYPE["$BUILD_BTYPE"]} ]] ; then
   AX_ERROR="Invalid binary type '$BUILD_BTYPE'"
   error
fi

APP_BUILD_SCRIPT_VAR="APP_BUILD_SCRIPT=Android.mk"
APP_ABI_VAR="APP_ABI=${BUILD_ARCH}"
APP_PLATFORM_VAR="APP_PLATFORM=android-${BUILD_API}"
APP_OPTIM_VAR="APP_OPTIM=${BUILD_MODE}"
APP_STL_VAR="APP_STL=c++_shared"

# For static libs we have to explicitly specify the modules
if [ "$BUILD_BTYPE" == "static" ]; then
   APP_MODULES_VAR="APP_MODULES=audioneex"
   AX_BUILD_BTYPE=
else
   AX_BUILD_BTYPE="AUDIONEEX_DLL=true"
fi

# The compiler's toolchain (currently only Clang)
NDK_TOOLCHAIN_VERSION_VAR=\
"NDK_TOOLCHAIN_VERSION=${BUILD_COMP}"
# Path for the intermediate files (.obj)
NDK_OUT_VAR=\
"NDK_OUT=${AX_ROOT_DIR}/build/android-${BUILD_ARCH}-${BUILD_COMP}/${BUILD_MODE}/obj"
# Path for the generated libraries
NDK_LIBS_OUT_VAR=\
"NDK_LIBS_OUT=${AX_ROOT_DIR}/build/android-${BUILD_ARCH}-${BUILD_COMP}/${BUILD_MODE}"

echo ""
echo "Architecture: $BUILD_ARCH"
echo "API version : $BUILD_API"
echo "Binary type : $BUILD_BTYPE"
echo "Build mode  : $BUILD_MODE"
echo "Compiler    : $BUILD_COMP"
echo ""

# Call ndk-build
${ANDROID_NDK_HOME}/ndk-build \
  $APP_BUILD_SCRIPT_VAR \
  $APP_ABI_VAR \
  $APP_PLATFORM_VAR \
  $APP_STL_VAR \
  $APP_MODULES_VAR \
  $APP_OPTIM_VAR \
  $NDK_OUT_VAR \
  $NDK_LIBS_OUT_VAR \
  $NDK_TOOLCHAIN_VERSION_VAR \
  $AX_BUILD_BTYPE 

# Call the install script
/bin/bash ./install_linux android \
  $BUILD_ARCH \
  $BUILD_COMP \
  $BUILD_MODE \
  $BUILD_BTYPE

echo ""
echo "Build successful!"
echo ""

