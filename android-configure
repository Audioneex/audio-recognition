#!/bin/bash
#
# Android cross-compilation environment setup script.
#
# Run it in place of the standard ./configure to prepare the environment
# with all the necessary settings to compile native binaries for Android
# on different architectures and platforms (API).
# 
# Usage: android-configure <arch> <api> [config_params]
#
# where <arch> is one of arm|arm64|x86(x32)|x86_64(x64), <api> the 
# Android Platform API Level and [config_params] optional parameters 
# to pass to ./configure, specific for the code being built.
#
# NOTES: The minimum supported NDK version is 19, and minimum API 21.
#        This means that using binaries compiled with this script on
#        devices with API < 21 may give rise to "symbols not found"
#        errors at runtime. This is because on newer platforms the
#        binaries no longer support older functionalities. One option
#        to fix this problem is to statically link the libraries with
#        libandroid_support (which also requires libc++). So you can,
#        for example, export linker flags before running this script,
#        like so
#
#        export LDFLAGS="-L<support_lib_dir> -lc++ -landroid_support"
#        
#        where <support_lib_dir> in NDK r19+ is a directory located at
#        <ndk_root>/sources/cxx-stl/llvm-libc++/libs/<arch>
#        More info on this issue at https://github.com/android-ndk/ndk/issues/544
# 
#

set -e

##########################################################
#                      User Config                       #
##########################################################

# Add here any extra include and library path that might be 
# needed to build the code, according to your setup.


MY_INCLUDE_DIRS=(
   /opt/android/include 
   /opt/android/include/armeabi-v7a
)

MY_LIB_DIRS=(
   /opt/android/lib 
   /opt/android/lib/armeabi-v7a
)


#---------------------------------------------------------
#                       Functions                        
#---------------------------------------------------------


function error()
{
  echo ""
  echo "ERROR: ${AX_ERROR}"
  echo ""
  echo "ERROR: ${AX_ERROR}" > build_dist_libs_errors.log
  exit 1
}

function usage()
{
  echo ""
  echo "Usage: android-configure <arch> <api> [config_params]"
  echo ""
  echo "       Where: <arch> - one of arm|arm64|x86(x32)|x86_64(x64)"
  echo "              <api>  - the Android Platform API Level (version number)"
  echo "              [config_params] optional parameters for ./configure"
  echo ""
  exit 1
}

function check_ndk()
{
    local VERSION_CHECK_REGEX="s/^Pkg.Revision\s*=\s*([0-9a-f]+)(.*)/\1/p"
    local VERSION_FILE_NAME="source.properties"
    local NDK_PATH=$ANDROID_NDK_HOME
    
    if [ ! $NDK_PATH ]; then
        NDK_PATH=$ANDROID_NDK_ROOT
        # If nothing found look in PATH
        if [ ! $NDK_PATH ]; then
           while read -d ':' folder; do
              if [ -d "$folder" ] && [ -f "$folder/ndk-build" ]; then
                  NDK_PATH=$folder
                  break
              fi
           done <<< "$PATH:"
           # If still nothing. Exit.
           if [ ! $NDK_PATH ]; then 
              local MSG=(
                 "Could not find the NDK. Please set either the ANDROID_NDK_HOME"
                 "or ANDROID_NDK_ROOT environment variable with the path to your"
                 "NDK installation directory."
              )
              AX_ERROR=${MSG[*]} && error
           fi
        fi
    fi

    # Set the global NDK root directory variable
    NDK_HOME=$NDK_PATH

    local VERSION_FILE=$NDK_PATH/$VERSION_FILE_NAME
    local VERSION=$(sed -En -e $VERSION_CHECK_REGEX $VERSION_FILE)
    if [ $VERSION -lt $NDK_MIN_SUPPORTED_VERSION ]; then
        local MSG=(
           "Your Android NDK version is not supported. The minimum"
           "required version is r$NDK_MIN_SUPPORTED_VERSION. Please"
           "upgrade to at least that version."
        )
        AX_ERROR=${MSG[*]} && error
    fi
}


#---------------------------------------------------------
#                      Build config
#---------------------------------------------------------


# The minimum NDK version required by the script.
NDK_MIN_SUPPORTED_VERSION=19

# Maps architecture names to "triples" used for binary prefixes,
# include directories, etc. found at various places in the NDK.
declare -A NDK_ARCH=(
    ["arm"]="arm-linux-androideabi" 
    ["arm7"]="armv7a-linux-androideabi" 
    ["arm64"]="aarch64-linux-android" 
    ["x86"]="i686-linux-android" 
    ["x86_64"]="x86_64-linux-android" 
)

# Maps architecture names to ABI names used in the NDK.
declare -A NDK_ABI=(
    ["arm"]="armeabi-v7a" 
    ["arm64"]="arm64-v8a" 
    ["x86"]="x86" 
    ["x86_64"]="x86_64" 
)

if [ $# -lt 2 ]; then usage; fi

BUILD_ARCH=$1
BUILD_API=$2
BUILD_COMP="clang"

# x86/x86_64 archs are also referred to as x32/x64
if [ "$BUILD_ARCH" == "x32" ]; then BUILD_ARCH="x86"; fi
if [ "$BUILD_ARCH" == "x64" ]; then BUILD_ARCH="x86_64"; fi

# Get the parameters that should be passed to ./configure, if any.
CONFIG_PARAMS=${*: 4:$#-3}

if [[ ! ${NDK_ARCH["$BUILD_ARCH"]} ]] ; then
   AX_ERROR="Invalid architecture '$BUILD_ARCH'"
   error
fi

if [[ ! $BUILD_API =~ ^[2-9][0-9]$ ]]; then
   AX_ERROR="Invalid API version '$BUILD_API'"
   error
fi


check_ndk


# The script assumes that the build system is a 64-bit Linux x86 machine.
# If that's not the case, set this variable according to your machine.
BUILD_SYS=x86_64-linux-gnu

# The directory where all the prebuilt NDK binaries for 64-bit Linux
# machines are stored. If you're on a different machine, set accordingly.
NDK_BUILD_SYS=linux-x86_64

# The path to the SYSROOT where libs for the specified API Level are found.
NDK_SYSROOT=$NDK_HOME/platforms/android-$BUILD_API/arch-$BUILD_ARCH

# The path to the SYSROOT where headers are found for all API levels.
NDK_SYSROOT_H=$NDK_HOME/sysroot/usr/include

# The path to the SYSROOT where headers for specific architectures are found,
NDK_SYSROOT_H_ARCH=$NDK_SYSROOT_H/${NDK_ARCH[$BUILD_ARCH]}

# The architecture-dependent prefix used to identify the build tools
NDK_TOOLS_PREFIX=${NDK_ARCH[$BUILD_ARCH]}

# Fix a mismatch in the ARM architecture naming for compiler prefixes.
# See https://developer.android.com/ndk/guides/other_build_systems - "Overview"
if [ "$BUILD_ARCH" == "arm" ]; then
   NDK_COMP_PREFIX=${NDK_TOOLS_PREFIX/arm/armv7a}$BUILD_API
else
   NDK_COMP_PREFIX=$NDK_TOOLS_PREFIX$BUILD_API
fi

export TOOLCHAIN=$NDK_HOME/toolchains/llvm/prebuilt/$NDK_BUILD_SYS
export CC=$TOOLCHAIN/bin/${NDK_COMP_PREFIX}-clang
export CXX=$TOOLCHAIN/bin/${NDK_COMP_PREFIX}-clang++
export LD=$TOOLCHAIN/bin/${NDK_TOOLS_PREFIX}-ld
export AR=$TOOLCHAIN/bin/${NDK_TOOLS_PREFIX}-ar
export AS=$TOOLCHAIN/bin/${NDK_TOOLS_PREFIX}-as
export RANLIB=$TOOLCHAIN/bin/${NDK_TOOLS_PREFIX}-ranlib
export STRIP=$TOOLCHAIN/bin/${NDK_TOOLS_PREFIX}-strip

# Compiler and linker flags required by all Android builds.
NDK_CFLAGS="-fPIE -fPIC"
NDK_CXXFLAGS=""
NDK_LDFLAGS="-pie"

# For ARM ABI, only v7a is built, which need the following flags.
if [ "$BUILD_ARCH" == "arm" ]; then
   NDK_CFLAGS="$NDK_CFLAGS -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16"
   NDK_LDFLAGS="$NDK_LDFLAGS -march=armv7-a -Wl,--fix-cortex-a8"
fi

# Build the user's include flags
for I in ${MY_INCLUDE_DIRS[*]}; do 
   USR_I_DIRS="$USR_I_DIRS -I$I"
done

# Build the user's lib flags
for L in ${MY_LIB_DIRS[*]}; do 
   USR_L_DIRS="$USR_L_DIRS -L$L"
done

# Setup the build environment

export CFLAGS="$CFLAGS \
   $NDK_CFLAGS \
   $USR_I_DIRS"

export CXXFLAGS="$CFLAGS $NDK_CXXFLAGS $USR_I_DIRS"

export LDFLAGS="$LDFLAGS \
   $NDK_LDFLAGS \
   $USR_L_DIRS"


# If there is a configure script in the current directory then run it,
# otherwise run make straight away.
if [ -f ./configure ]; then

./configure \
   --build=${BUILD_SYS} \
   --host=${NDK_ARCH[$BUILD_ARCH]}  \
   ${CONFIG_PARAMS}

else
   echo -e "WARNING: configure script not found in the current directory. Running make ...\n"
   make
fi

